C51 COMPILER V9.56.0.0   MAIN                                                              03/06/2023 13:08:29 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\source\Main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(M:\SA\SA_FW\jph\code_51
                    -\A7102\source\) DEBUG OBJECTEXTEND PRINT(.\Main.lst) TABS(2) OBJECT(.\Main.obj)

line level    source

   1          /*********************************************************************                                    
             -                               **
   2          **  Device:   A5133
   3          **  File:     main.c
   4          **  Author:   JPH
   5          **  Target:   A8xxx
   6          **  Tools:    ICE
   7          **  Created:  
   8          **  Description:
   9          **  This file is a sample code for your reference.
  10          **
  11          **  Copyright (C) 2007 AMICCOM Electronics Corp.
  12          **
  13          **  Revision history:
  14          **
  15          *********************************************************************/
  16          #include "define.h"
  17          #include "A8105reg.h"
  18          #include "A5133reg.h"
  19          #include "A5133Config.h"
  20          #include "Uti.h"
  21          
  22          /*********************************************************************
  23          **  I/O Declaration
  24          *********************************************************************/
  25          #define SCS       P0_3    //spi SCS
  26          #define SCK       P0_0    //spi SCK
  27          #define SDIO      P0_1    //spi SDIO
  28          #define CKO       P1_3    //CKO
  29          #define GIO1      P0_2    //GPIO1
  30          #define GIO2      P1_2    //GPIO2
  31          #define Button    P3_2    //test Button
  32          
  33          /*********************************************************************
  34          **  Constant Declaration
  35          *********************************************************************/
  36          #define TIMEOUT          50
  37          #define t0hrel           1333//1000
  38          #define BaudRate38400   (65536-((16000000)/(32*38400)))
  39          
  40          /************************************************************************
  41          **  Global Variable Declaration
  42          ************************************************************************/
  43          Uint8   data     timer;
  44          Uint16  data     TimerCnt;
  45          Uint8   data     Slot_TX;
  46          Uint8   data     Flag_Timeout;
  47          Uint16  idata    RxCnt;
  48          Uint8   data     *Uartptr;
  49          Uint8   data     UartSendCnt;
  50          Uint8   data     CmdBuf[25];
  51          Uint8   idata    tmpbuf[80];
  52          Uint16  idata    Err_Loss;
  53          Uint16  idata    Err_Frame;
C51 COMPILER V9.56.0.0   MAIN                                                              03/06/2023 13:08:29 PAGE 2   

  54          Uint32  idata    Err_BitCnt;
  55          Uint8   data     Flag_Report;
  56          Uint8   idata    Flag_FirstLink;
  57          Uint8   idata    Flag_MASTER;
  58          Uint8   idata    Mem_RH;
  59          Uint8   idata    Mem_RL;
  60          
  61          const Uint8 code BitCount_Tab[16] = {0,1,1,2,1,2,2,3,1,2,2,3,2,3,3,4};
  62          const Uint8 code ID_Tab[8]={0xC3,0x3C,0x95,0x6A,0x36,0x75,0xC5,0x2A};//ID code
  63          //const Uint8 //code ID_Tab[8]={0x34,0x75,0xC5,0x2A,0xC7,0x33,0x45,0xEA};//ID code
  64          //const Uint8 code ID_Tab[8]={0x55,0x55,0x55,0x55,0x34,0x75,0xC5,0x6A}; //ID2 code
  65          //const Uint8 code ID_Tab[8]={0xFF,0xFF,0xFF,0xFF,0x36,0x75,0xC5,0xBA}; //ID2 code
  66          //const Uint8 code ID_Tab[8]={0x34,0x75,0xC5,0x2A,0x34,0x75,0xC5,0x2A}; //ID2 code
  67          const Uint8 code KeyData_Tab[16]={0x00,0x00,0x00,0x00,0x00,0x0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0
             -0,0x00}; //keyData code
  68          const Uint8 code FCB_Tab[20]={0x00,0x00,0x00,0x00,0x00,0x15,0x20,0x25,0x30,0x35,0x40,0x45,0x50,0x55,0x60,0
             -x65,0x70,0x75,0x80,0x85}; //keyData code
  69          const Uint8 code PN9_Tab[]=
  70          {   0xFF,0x83,0xDF,0x17,0x32,0x09,0x4E,0xD1,
  71              0xE7,0xCD,0x8A,0x91,0xC6,0xD5,0xC4,0xC4,
  72              0x40,0x21,0x18,0x4E,0x55,0x86,0xF4,0xDC,
  73              0x8A,0x15,0xA7,0xEC,0x92,0xDF,0x93,0x53,
  74              0x30,0x18,0xCA,0x34,0xBF,0xA2,0xC7,0x59,
  75              0x67,0x8F,0xBA,0x0D,0x6D,0xD8,0x2D,0x7D,
  76              0x54,0x0A,0x57,0x97,0x70,0x39,0xD2,0x7A,
  77              0xEA,0x24,0x33,0x85,0xED,0x9A,0x1D,0xE0,
  78          };
  79          
  80          /*********************************************************************
  81          **  function Declaration
  82          *********************************************************************/
  83          void MCU_Init(void);
  84          void Timer0_Init(void);
  85          void ISR_Timer0 (void);
  86          void Uart0_Init_WithTimer2(void);
  87          void ISR_Uart0(void);
  88          void Clr_timer(void);
  89          void Err_State(void);
  90          void RF_Reset(void);
  91          void RF_WriteID(Uint8* ptr);
  92          void RF_ReadID(Uint8* ptr);
  93          Uint8 RF_ReadPage(Uint8 addr, Uint8 page);
  94          void RF_WritePage(Uint8 addr, Uint8 wbyte, Uint8 page);
  95          void RF_WriteReg(Uint8, Uint8);
  96          Uint8 RF_ReadReg(Uint8);
  97          void ByteSend(Uint8 src);
  98          Uint8 ByteRead(void);
  99          void RF_SetCH(Uint8);
 100          Uint8 RF_Init(void);
 101          void RF_FIFOWrite(Uint8);
 102          void RF_StrobeCmd(Uint8);
 103          void RxPacket(void);
 104          Uint8 RF_Cal_CHGroup(Uint8 ch);
 105          Uint8 RF_Cal(void);
 106          void RF_Config(void);
 107          void RF_FCB(void);
 108          void RF_KeyData(void);
 109          void RF_FIFOLength(Uint16 len);
 110          void RF_TrimmedValue_Init(void);
 111          Sint16 RF_RSSI_Read(void);
 112          void RF_PM_SleepMode(void);
 113          Uint8 RF_LVR_Check(void);
C51 COMPILER V9.56.0.0   MAIN                                                              03/06/2023 13:08:29 PAGE 3   

 114          void RF_WOR_En(void);
 115          void RF_AdvFIFO_Init(void);
 116          Uint8 Is_Vpoak(void);
 117          void main_prog_ACK(void);
 118          
 119          /*********************************************************************
 120          * main loop
 121          *********************************************************************/
 122          void main(void)
 123          {
 124   1        MCU_Init();
 125   1        Timer0_Init();
 126   1        Uart0_Init_WithTimer2();
 127   1        Delay10ms(10);
 128   1        
 129   1        if(RF_Init())/* init RF */
 130   1          Err_State();
 131   1        
 132   1        RF_WriteReg(MODECTRL_REG, 0x60);/* Direct mode */
 133   1        RF_SetCH(80);/* ch=80, freq=5805.001MHz */
 134   1        /*  To set RF channel                                                                                */
 135   1        /*  RF base Freq : 5725.001MHz                                                                       */
 136   1        /*  Channel step : 1MHz                                                                              */
 137   1        /*  SetCH        : 80                                                                                */
 138   1        /*  RF Frequency = RF base Freq + (Channel step * SetCH) = 5725.001MHz + ( 1MHz * 80 ) = 5805.001MHz */
 139   1      
 140   1        if(P3_5)
 141   1          Flag_MASTER = 1;//master device
 142   1        else  
 143   1          Flag_MASTER = 0;//slave device
 144   1        
 145   1        if(Flag_MASTER) 
 146   1        {  
 147   2          RF_WriteReg(CKO_REG, 0x02);/* cko-dck */
 148   2          RF_WriteReg(GIO1_REG, 0x1D);/* gio1-TRXD */
 149   2          RF_WriteReg(GIO2_REG, 0x09);/* gio2-TMEO */
 150   2          
 151   2          while(1)
 152   2          { 
 153   3            RF_StrobeCmd(CMD_TX);//entry tx
 154   3                       
 155   3            /* data transmit procedure */
 156   3            while(~GIO2);/* waiting TX modulation start */
 157   3            //use GIO1 pin send data follow CKO pin...
 158   3            //...
 159   3            RF_StrobeCmd(CMD_STBY);//entry standby
 160   3            Delay10ms(5);
 161   3          } 
 162   2        }
 163   1        else
 164   1        {
 165   2          RF_WriteReg(CKO_REG, 0x02);/* cko-dck */
 166   2          RF_WriteReg(GIO1_REG, 0x1D);/* gio1-TRXD */
 167   2          RF_WriteReg(GIO2_REG, 0x05);/* gio2-Fsync */
 168   2      
 169   2          while(1)
 170   2          { 
 171   3            RF_StrobeCmd(CMD_RX);//entry rx
 172   3      
 173   3            /* data receive procedure */
 174   3            //After GPIO2-Fsync=1, use the CKO signal of CKO-dck pin to latch RXD with the rising edge of cko 
 175   3            //...
C51 COMPILER V9.56.0.0   MAIN                                                              03/06/2023 13:08:29 PAGE 4   

 176   3            RF_StrobeCmd(CMD_STBY);//entry standby
 177   3             
 178   3            Delay10ms(3); 
 179   3          }
 180   2        }
 181   1      }
 182          
 183          /************************************************************************
 184          **  MCU_Init
 185          ************************************************************************/
 186          void MCU_Init(void)
 187          {
 188   1        //initHW
 189   1        P0 = 0xFF;
 190   1        P1 = 0xFF;
 191   1        P2 = 0xFF;
 192   1        P3 = 0xFF;
 193   1      
 194   1        P0OE = 0x7B;
 195   1        P1OE = 0xF3;
 196   1        P2OE = 0xFF;
 197   1        P3OE = 0xFF;
 198   1      
 199   1        P0PUN = ~0x00;
 200   1        P1PUN = ~0x00;
 201   1        P2PUN = ~0x00;
 202   1        P3PUN = ~0x00;
 203   1         
 204   1        P0WUN = ~0x00;
 205   1        P1WUN = ~0x00;
 206   1        P2WUN = ~0x00;
 207   1        P3WUN = ~0x00;
 208   1      }
 209          
 210          /************************************************************************
 211          **  Timer0_Init
 212          ************************************************************************/
 213          void Timer0_Init(void)
 214          {
 215   1        TR0 = 0;
 216   1        TMOD =(TMOD & 0xF0)|0x01; //timer0 mode=1
 217   1        TH0 = (65536-t0hrel)>>8; // Reload Timer0 high byte,low byte
 218   1        TL0 = 65536-t0hrel;
 219   1        TF0 = 0; // Clear any pending Timer0 interrupts
 220   1        ET0 = 1; // Enable Timer0 interrupt
 221   1      }
 222          
 223          /************************************************************************
 224          **  ISR_Timer0
 225          ************************************************************************/
 226          void ISR_Timer0 (void) interrupt 1
 227          {
 228   1        TF0 = 0; // Clear Timer0 interrupt
 229   1        TH0 = (65536-t0hrel)>>8; // Reload Timer0 high byte,low byte
 230   1        TL0 = 65536-t0hrel;
 231   1      
 232   1        timer++;
 233   1        if (timer == TIMEOUT)
 234   1          Flag_Timeout=1;
 235   1      
 236   1        if (timer==2)
 237   1          Slot_TX=1;
C51 COMPILER V9.56.0.0   MAIN                                                              03/06/2023 13:08:29 PAGE 5   

 238   1      
 239   1        TimerCnt++;
 240   1        if (TimerCnt >=500)
 241   1        {
 242   2          TimerCnt=0;
 243   2          CmdBuf[0]=0xF1;
 244   2          memcpy(&CmdBuf[1], &RxCnt, 2);
 245   2          memcpy(&CmdBuf[3], &Err_Loss, 2);
 246   2          memcpy(&CmdBuf[5], &Err_Frame, 2);
 247   2          memcpy(&CmdBuf[7], &Err_BitCnt, 4);
 248   2      
 249   2          UartSendCnt=12;
 250   2          Uartptr=&CmdBuf[0];
 251   2          SBUF=CmdBuf[0];
 252   2        }
 253   1      }
 254          
 255          /************************************************************************
 256          **  Uart0_Init_WithTimer2
 257          ************************************************************************/
 258          void Uart0_Init_WithTimer2(void)
 259          {
 260   1        IOSEL |= 0x01;//enable BBIOS + UART
 261   1        PCON = 0x00;
 262   1        SCON=0x40;
 263   1        T2CON=0x30;
 264   1        RCAP2H = BaudRate38400 / 256;
 265   1        RCAP2L = BaudRate38400 % 256;
 266   1        TR2=1;
 267   1        REN = 1;
 268   1        ES=1;//enable uart0 interrupt
 269   1      }
 270          
 271          /************************************************************************
 272          **  ISR_Uart0
 273          ************************************************************************/
 274          void ISR_Uart0(void) interrupt 4 using 3
 275          {
 276   1        if (TI==1)
 277   1        {
 278   2          TI=0;
 279   2          UartSendCnt--;
 280   2          if(UartSendCnt !=0)
 281   2          {
 282   3             Uartptr++;
 283   3             SBUF = *Uartptr;
 284   3          }
 285   2        }
 286   1      
 287   1        if (RI==1)
 288   1        {
 289   2          RI=0;
 290   2        }
 291   1      }
 292          
 293          /************************************************************************
 294          **  Clr_timer
 295          ************************************************************************/
 296          void Clr_timer(void)
 297          {
 298   1        TR0 = 0;
 299   1        TH0 = (65536-t0hrel-5)>>8; // Reload Timer0 high byte,low byte
C51 COMPILER V9.56.0.0   MAIN                                                              03/06/2023 13:08:29 PAGE 6   

 300   1        TL0 = 65536-t0hrel-5;
 301   1        timer = 2;
 302   1        TR0 = 1;
 303   1      }
 304          
 305          /*********************************************************************
 306          ** Err_State
 307          *********************************************************************/
 308          void Err_State(void)
 309          {
 310   1        //ERR display
 311   1        //Error Proc...
 312   1        //...
 313   1        while(1);
 314   1      }
 315             
 316          /************************************************************************
 317          **  Reset_RF
 318          ************************************************************************/
 319          void RF_Reset(void)
 320          {
 321   1        RF_WriteReg(MODE_REG, 0x00); //reset RF chip
 322   1      }
 323          
 324          /************************************************************************
 325          **  RF_WriteID
 326          ************************************************************************/
 327          void RF_WriteID(Uint8* ptr)
 328          {
 329   1        Uint8 i;
 330   1      
 331   1        SCS = 0;
 332   1        ByteSend(IDCODE_REG);
 333   1        for (i=0; i < 8; i++)
 334   1          ByteSend(*ptr++);
 335   1        SCS = 1;
 336   1      }
 337          
 338          /************************************************************************
 339          **  RF_ReadID
 340          ************************************************************************/
 341          void RF_ReadID(Uint8* ptr)
 342          {
 343   1        Uint8 i;
 344   1      
 345   1        SCS=0;
 346   1        ByteSend(IDCODE_REG | 0x40);
 347   1        for (i=0; i<8; i++)
 348   1          *ptr++ = ByteRead();
 349   1        SCS=1;
 350   1      }
 351          
 352          /*********************************************************************
 353          ** RF_ReadPage
 354          *********************************************************************/
 355          Uint8 RF_ReadPage(Uint8 addr, Uint8 page)
 356          {
 357   1        Uint8 tmp;
 358   1      
 359   1        RF_WriteReg(RFANALOG_REG, (A5133_RFConfigTab_Main[0x35]&0x0F) | page<<4);
 360   1        tmp = RF_ReadReg(addr);
 361   1        return tmp;
C51 COMPILER V9.56.0.0   MAIN                                                              03/06/2023 13:08:29 PAGE 7   

 362   1      }
 363          
 364          /*********************************************************************
 365          ** RF_WritePage
 366          *********************************************************************/
 367          void RF_WritePage(Uint8 addr, Uint8 wbyte, Uint8 page)
 368          {
 369   1        RF_WriteReg(RFANALOG_REG, (A5133_RFConfigTab_Main[0x35]&0x0F) | page<<4);
 370   1        RF_WriteReg(addr, wbyte);
 371   1      }
 372          
 373          /************************************************************************
 374          **  RF_WriteReg
 375          ************************************************************************/
 376          void RF_WriteReg(Uint8 addr, Uint8 dataByte)
 377          {
 378   1        SCS = 0;
 379   1        ByteSend(addr);//bit7 cmd=0, bit6 r/w=0
 380   1        ByteSend(dataByte);
 381   1        SCS = 1;
 382   1      }
 383          
 384          /************************************************************************
 385          **  RF_ReadReg
 386          ************************************************************************/
 387          Uint8 RF_ReadReg(Uint8 addr)
 388          {
 389   1        Uint8 tmp;
 390   1      
 391   1        SCS = 0;
 392   1        ByteSend(addr | 0x40);//bit7 cmd=0,bit6 r/w=1
 393   1        tmp = ByteRead();
 394   1        SCS = 1;
 395   1      
 396   1        return tmp;
 397   1      }
 398          
 399          /************************************************************************
 400          **  ByteSend
 401          ************************************************************************/
 402          void ByteSend(Uint8 src)
 403          {
 404   1        Uint8 i;
 405   1      
 406   1        for(i = 0; i < 8; i++)
 407   1        {
 408   2          if(src & 0x80)
 409   2             SDIO = 1;
 410   2          else
 411   2             SDIO = 0;
 412   2      
 413   2          _nop_();
 414   2          SCK = 1;
 415   2          _nop_();
 416   2          SCK = 0;
 417   2          src = src << 1;
 418   2        }
 419   1      }
 420          
 421          /************************************************************************
 422          **  ByteRead
 423          ************************************************************************/
C51 COMPILER V9.56.0.0   MAIN                                                              03/06/2023 13:08:29 PAGE 8   

 424          Uint8 ByteRead(void)
 425          {
 426   1        Uint8 i,tmp;
 427   1      
 428   1        SDIO = 1; //sdio pull high
 429   1        P0OE = P0OE & (~0x02);
 430   1        for(i = 0; i < 8; i++)
 431   1        {
 432   2          if(SDIO)
 433   2             tmp = (tmp << 1) | 0x01;
 434   2          else
 435   2             tmp = tmp << 1;
 436   2      
 437   2          SCK = 1;
 438   2          _nop_();
 439   2          SCK = 0;
 440   2        }
 441   1        P0OE = P0OE | (0x02);
 442   1        return tmp;
 443   1      }
 444          
 445          /*********************************************************************
 446          ** RF_SetCH
 447          *********************************************************************/
 448          void RF_SetCH(Uint8 ch)
 449          {
 450   1        RF_WriteReg(PLL1_REG, ch); //RF freq = RFbase + (CH_Step * ch)
 451   1      }
 452          
 453          /*********************************************************************
 454          ** initRF
 455          *********************************************************************/
 456          Uint8 RF_Init(void)
 457          {
 458   1        Uint8 i,id[8];
 459   1      
 460   1        /* init io pin */
 461   1        SCS = 1;
 462   1        SCK = 0;
 463   1        SDIO = 1;
 464   1        CKO = 1;
 465   1        GIO1 = 1;
 466   1        GIO2 = 1;
 467   1      
 468   1        RF_Reset();/* reset RF chip */
 469   1        RF_WriteID(ID_Tab);/* write ID code */
 470   1        RF_ReadID(id);
 471   1        for (i=0; i<8; i++)
 472   1        {
 473   2          if (id[i] ^ ID_Tab[i])
 474   2            return 1;/* fail */
 475   2        }
 476   1          
 477   1        RF_Config();/* config A7157 chip */
 478   1        RF_TrimmedValue_Init();/* load trimming value */
 479   1        if(RF_Cal())/* rf calibration */
 480   1          return 1;
 481   1      
 482   1        return 0;
 483   1      }
 484          
 485          /*********************************************************************
C51 COMPILER V9.56.0.0   MAIN                                                              03/06/2023 13:08:29 PAGE 9   

 486          ** RF_FIFOWrite
 487          *********************************************************************/
 488          void RF_FIFOWrite(Uint8 len)
 489          {
 490   1        Uint8 i;
 491   1      
 492   1        RF_StrobeCmd(CMD_TFR);//TX fifo pointer reset
 493   1        SCS=0;
 494   1        ByteSend(FIFO_REG);//send address 0x05, bit7 cmd=0, bit6 r/w=0
 495   1        for(i=0; i <len; i++)
 496   1          ByteSend(PN9_Tab[i]);
 497   1        SCS=1;  
 498   1      }
 499          
 500          /*********************************************************************
 501          ** RF_StrobeCmd
 502          *********************************************************************/
 503          void RF_StrobeCmd(Uint8 cmd)
 504          {
 505   1        SCS = 0;
 506   1        ByteSend(cmd);
 507   1        SCS = 1;
 508   1      }
 509          
 510          /*********************************************************************
 511          ** RxPacket
 512          *********************************************************************/
 513          void RxPacket(void)
 514          {
 515   1        Uint8 i,recv,tmp,err;
 516   1      
 517   1        RxCnt++;
 518   1        err=0;
 519   1      
 520   1        RF_StrobeCmd(CMD_RFR);//RX fifo pointer reset
 521   1        SCS=0;
 522   1        ByteSend(FIFO_REG | 0x40);//address 0x05, bit7 cmd=0, bit6 r/w=1
 523   1        for(i=0; i <64; i++)
 524   1        {
 525   2          recv = ByteRead();
 526   2          tmpbuf[i]=recv;
 527   2          if((recv ^ PN9_Tab[i])!=0)
 528   2          {
 529   3            tmp = recv ^ PN9_Tab[i];
 530   3            Err_BitCnt += (BitCount_Tab[tmp>>4] + BitCount_Tab[tmp & 0x0F]);
 531   3            err=1;
 532   3          }
 533   2        }
 534   1        SCS=1;
 535   1      
 536   1        if (err)//packet error
 537   1          Err_Frame++;
 538   1      }
 539          
 540          /*********************************************************************
 541          ** RF_Cal_CHGroup
 542          *********************************************************************/
 543          Uint8 RF_Cal_CHGroup(Uint8 ch)
 544          {
 545   1        Uint8 tmp;
 546   1        Uint8 vb,vbcf,vcb,vccf;
 547   1        Uint8 deva,adev;
C51 COMPILER V9.56.0.0   MAIN                                                              03/06/2023 13:08:29 PAGE 10  

 548   1      
 549   1        RF_WriteReg(PLL1_REG, ch);
 550   1        RF_WriteReg(CALIBRATION_REG, 0x1C);
 551   1        do{
 552   2             tmp = RF_ReadReg(CALIBRATION_REG)&0x1C;
 553   2        }while (tmp);
 554   1      
 555   1        //for check
 556   1        tmp = RF_ReadReg(VCOCCAL_REG);
 557   1        vcb = tmp & 0x0F;
 558   1        vccf = (tmp>>4) & 0x01;
 559   1      
 560   1        tmp = RF_ReadReg(VCOCAL1_REG);
 561   1        vb = tmp & 0x0F;
 562   1        vbcf = (tmp >>4) & 0x01;
 563   1      
 564   1        tmp = RF_ReadReg(VCODEVCAL1_REG);
 565   1        deva = tmp;
 566   1      
 567   1        tmp = RF_ReadReg(VCODEVCAL2_REG);
 568   1        adev = tmp;
 569   1      
 570   1        if(vbcf)
 571   1          return 1;//error   
 572   1      
 573   1        return 0;
 574   1      }
 575          
 576          /*********************************************************************
 577          ** calibration
 578          *********************************************************************/
 579          Uint8 RF_Cal(void)
 580          {
 581   1        Uint8 tmp;
 582   1        Uint8 rhc,rlc,fb,fbcf,fcd;
 583   1      
 584   1        RF_StrobeCmd(CMD_PLL); //calibration @PLL state
 585   1        RF_WriteReg(RFANALOG_REG, 0);
 586   1      
 587   1        //IF,RSSI,RC procedure
 588   1        RF_WriteReg(CALIBRATION_REG, 0x23);
 589   1        do{
 590   2             tmp = RF_ReadReg(CALIBRATION_REG)&0x23;
 591   2        }while(tmp);  
 592   1      
 593   1        //calibration VBC,VDC procedure
 594   1        if(RF_Cal_CHGroup(20)) //calibrate channel group Bank I
 595   1          return 1;
 596   1        if(RF_Cal_CHGroup(60)) //calibrate channel group Bank II
 597   1          return 1;
 598   1        if(RF_Cal_CHGroup(100)) //calibrate channel group Bank III
 599   1          return 1;
 600   1      
 601   1        RF_StrobeCmd(CMD_STBY); //return to STBY state
 602   1      
 603   1        //for check
 604   1        tmp = RF_ReadReg(IFCAL1_REG);
 605   1        fb = tmp & 0x0F;
 606   1        fbcf = (tmp>>4) & 0x01;
 607   1      
 608   1        tmp = RF_ReadReg(IFCAL2_REG);
 609   1        fcd = tmp & 0x1F;
C51 COMPILER V9.56.0.0   MAIN                                                              03/06/2023 13:08:29 PAGE 11  

 610   1      
 611   1        rhc = RF_ReadReg(RXGAIN2_REG);
 612   1        rlc = RF_ReadReg(RXGAIN3_REG);
 613   1        Mem_RH = rhc;
 614   1        Mem_RL = rlc;
 615   1      
 616   1        if(fbcf)
 617   1          return 1;//error
 618   1      
 619   1        return 0;
 620   1      }
 621          
 622          /*********************************************************************
 623          ** RF_Config
 624          *********************************************************************/
 625          void RF_Config(void)
 626          {
 627   1        Uint8 i;
 628   1      
 629   1        //0x00 mode register, for reset
 630   1        //0x05 fifo data register
 631   1        //0x06 id code register
 632   1        //0x36 key data, 16 bytes
 633   1        //0x3D FCB register,4 bytes
 634   1        //0x3F USID register, read only
 635   1      
 636   1        for (i=0x01; i<=0x04; i++)
 637   1          RF_WriteReg(i, A5133_RFConfigTab_Main[i]);
 638   1      
 639   1        for (i=0x07; i<=0x1F; i++)
 640   1          RF_WriteReg(i, A5133_RFConfigTab_Main[i]);
 641   1      
 642   1        for (i=0; i<=12; i++)//0x20 code1
 643   1          RF_WritePage(0x20, A5133_RFConfigTab_Addr0x20[i], i);
 644   1      
 645   1        for (i=0; i<=12; i++)//0x21 code2
 646   1          RF_WritePage(0x21, A5133_RFConfigTab_Addr0x21[i], i);
 647   1      
 648   1        for (i=0; i<=5; i++)//0x22 code3
 649   1          RF_WritePage(0x22, A5133_RFConfigTab_Addr0x22[i], i);
 650   1      
 651   1        for (i=0x23; i<=0x29; i++)
 652   1          RF_WriteReg(i, A5133_RFConfigTab_Main[i]);
 653   1      
 654   1        for (i=0; i<=12; i++)//0x2A DAS
 655   1          RF_WritePage(0x2A, A5133_RFConfigTab_Addr0x2A[i], i);
 656   1      
 657   1        for (i=0x2B; i<=0x35; i++)
 658   1          RF_WriteReg(i, A5133_RFConfigTab_Main[i]);
 659   1      
 660   1        RF_WriteReg(0x37, A5133_RFConfigTab_Main[0x37]);
 661   1      
 662   1        for (i=0; i<=11; i++)//0x38 ROM
 663   1          RF_WritePage(0x38, A5133_RFConfigTab_Addr0x38[i], i);
 664   1      
 665   1        for (i=0x39; i<=0x3C; i++)
 666   1          RF_WriteReg(i, A5133_RFConfigTab_Main[i]);
 667   1      
 668   1        RF_WriteReg(0x3E, A5133_RFConfigTab_Main[0x3E]);
 669   1      }
 670          
 671          /*********************************************************************
C51 COMPILER V9.56.0.0   MAIN                                                              03/06/2023 13:08:29 PAGE 12  

 672          ** RF_FCB
 673          *********************************************************************/
 674          void RF_FCB(void)
 675          {
 676   1        Uint8 i;
 677   1      
 678   1        SCS = 0;
 679   1        ByteSend(FCB_REG);//address 0x3D, bit7 cmd=0, bit6 r/w=0
 680   1        for (i=0; i < 20; i++)
 681   1          ByteSend(FCB_Tab[i]);
 682   1        SCS = 1;
 683   1      }
 684          
 685          /*********************************************************************
 686          ** A7157_KeyData
 687          *********************************************************************/
 688          void RF_KeyData(void)
 689          {
 690   1        Uint8 i;
 691   1      
 692   1        SCS = 0;
 693   1        ByteSend(KEYDATA_REG);//address 0x36, bit7 cmd=0, bit6 r/w=0
 694   1        for (i=0; i < 16; i++)
 695   1          ByteSend(KeyData_Tab[i]);
 696   1        SCS = 1;
 697   1      }
 698          
 699          /*********************************************************************
 700          ** RF_FIFOLength
 701          *********************************************************************/
 702          void RF_FIFOLength(Uint16 len)
 703          {
 704   1        SCS = 0;
 705   1        ByteSend(FIFO1_REG);
 706   1        ByteSend(len & 0xFF);//low byte
 707   1        ByteSend(len>>8);//high byte
 708   1        SCS = 1;
 709   1      }
 710          
 711          /*********************************************************************
 712          ** RF_TrimmedValue_Init
 713          *********************************************************************/
 714          void RF_TrimmedValue_Init(void)
 715          {
 716   1        Uint8 i;
 717   1        Uint8 trimValue[8];
 718   1        //Uint8 tmp_checksum;
 719   1      
 720   1        //trimValue[0]=FBG
 721   1        //trimValue[1]=CTR
 722   1        //trimValue[2]=BDC
 723   1        //trimValue[3]=STM
 724   1        //trimValue[4]=Checksum for trimvalue[0]~trimvalue[3]
 725   1        //trimValue[5]=CSXTL
 726   1        //trimValue[6]=FBG_CP
 727   1        //trimValue[7]=Checksum for customer
 728   1      
 729   1        RF_WritePage(ROMP_REG, A5133_RFConfigTab_Addr0x38[9] | 0xA0, 9);//enable EFSW=1, EFRE=1
 730   1        
 731   1        Delay1ms(5);  //wait for stability
 732   1        
 733   1        SCS = 0;
C51 COMPILER V9.56.0.0   MAIN                                                              03/06/2023 13:08:29 PAGE 13  

 734   1        ByteSend(USID_REG | 0x40);
 735   1        for (i=0; i < 8; i++)
 736   1          trimValue[i] = ByteRead();
 737   1        SCS = 1;
 738   1        RF_WritePage(ROMP_REG, A5133_RFConfigTab_Addr0x38[9], 9);//disable EFSW=1, EFRE=1
 739   1      
 740   1        if((trimValue[0] + trimValue[1]) == trimValue[4]) //case1-only FT
 741   1        {
 742   2          if((trimValue[0]!=0) && (trimValue[1]!=0))
 743   2          {
 744   3            RF_WritePage(ROMP_REG, (A5133_RFConfigTab_Addr0x38[1] & 0xE0) | trimValue[0], 1);//FBG
 745   3            RF_WritePage(ROMP_REG, (A5133_RFConfigTab_Addr0x38[2] & 0xC0) | trimValue[1], 2);//CTR          
 746   3          }
 747   2          else
 748   2            Err_State();
 749   2         }
 750   1        else if((trimValue[0] + trimValue[1] + trimValue[2] + trimValue[3]) == trimValue[4]) //case2-CP+FT
 751   1        {
 752   2          if((trimValue[0]!=0) && (trimValue[1]!=0) && (trimValue[2]!=0) && (trimValue[3]!=0)) 
 753   2          {
 754   3            RF_WritePage(ROMP_REG, (A5133_RFConfigTab_Addr0x38[1] & 0xE0) | trimValue[0], 1);//FBG
 755   3            RF_WritePage(ROMP_REG, (A5133_RFConfigTab_Addr0x38[2] & 0xC0) | trimValue[1], 2);//CTR      
 756   3            RF_WritePage(ROMP_REG, (A5133_RFConfigTab_Addr0x38[0] & 0x03) | (trimValue[2]<<2), 0);//BDC
 757   3            RF_WritePage(ROMP_REG, (A5133_RFConfigTab_Addr0x38[4] & 0x40) | trimValue[3], 4);//STM
 758   3          }
 759   2          else
 760   2            Err_State();
 761   2        }
 762   1        else //only CP
 763   1        {
 764   2          if((trimValue[0]==0) && (trimValue[1]!=0) && (trimValue[2]!=0) && (trimValue[3]!=0) && (trimValue[4]==0)
             - && (trimValue[6]!=0)) 
 765   2          {
 766   3            RF_WritePage(ROMP_REG, (A5133_RFConfigTab_Addr0x38[1] & 0xE0) | trimValue[6], 1);//FBG
 767   3            RF_WritePage(ROMP_REG, (A5133_RFConfigTab_Addr0x38[2] & 0xC0) | trimValue[1], 2);//CTR      
 768   3            RF_WritePage(ROMP_REG, (A5133_RFConfigTab_Addr0x38[0] & 0x03) | (trimValue[2]<<2), 0);//BDC
 769   3            RF_WritePage(ROMP_REG, (A5133_RFConfigTab_Addr0x38[4] & 0x40) | trimValue[3], 4);//STM
 770   3          }
 771   2          else
 772   2            Err_State();     
 773   2        }
 774   1      }
 775            
 776          /*********************************************************************
 777          ** RF_RSSI_Read
 778          *********************************************************************/
 779          Sint16 RF_RSSI_Read(void)
 780          {
 781   1        Uint8 rssi;
 782   1        Sint16 tmp;
 783   1      
 784   1        rssi= RF_ReadReg(RSSI_REG); //read RSSI value(wanted signal RSSI)
 785   1      
 786   1        //RF power in(dBm) = (RSSI - RL) / (RH - RL)  * 12  -  80dbm - 3
 787   1        tmp = ((rssi*1.0 - Mem_RL) / (Mem_RH - Mem_RL) * 12.0) - 80 - 3; 
 788   1        return tmp;
 789   1      }
 790          
 791          /*********************************************************************
 792          ** RF_PM_SleepMode
 793          *********************************************************************/
 794          void RF_PM_SleepMode(void)
C51 COMPILER V9.56.0.0   MAIN                                                              03/06/2023 13:08:29 PAGE 14  

 795          {
 796   1        RF_StrobeCmd(CMD_SLEEP);
 797   1        SCK = 1;
 798   1        SDIO = 1;
 799   1      }
 800          
 801          /*********************************************************************
 802          ** RF_Low Voltage Reset_Check
 803          *********************************************************************/
 804          Uint8 RF_LVR_Check(void)
 805          {
 806   1        Uint8 tmp;
 807   1      
 808   1        tmp = RF_ReadReg(VCOCAL2_REG);
 809   1        if(tmp == 0xFF)//default reset value 0xFF
 810   1          return 1;
 811   1        else
 812   1          return 0;
 813   1      }
 814          
 815          /*********************************************************************
 816          ** RF_WOR_En
 817          *********************************************************************/
 818          void RF_WOR_En(void)
 819          {
 820   1        RF_WriteReg(GIO1_REG, 0x01);//WTR
 821   1        RF_WriteReg(GIO2_REG, 0x11);//MCU wakeup signal
 822   1        RF_WriteReg(CKO_REG, 0x02);   
 823   1      
 824   1        RF_WriteReg(RCOSC1_REG, 0x0B);//WOR_SL=11, SL time=(11+1)*32*(1/4KHz)
 825   1        RF_WriteReg(RCOSC2_REG, 0x0B);//WOR_AC=11, AC time(wakeup time + RX time)=(11+1)*(1/4KHz)
 826   1        RF_WriteReg(RCOSC3_REG, 0x0C);//RCOSC enable
 827   1      
 828   1        while(1)
 829   1        { 
 830   2          RF_WriteReg(MODECTRL_REG, A5133_RFConfigTab_Main[1] | (1<<3));  //WOR enable
 831   2          while(~GIO2);//waitting to wakeup until packet is received 
 832   2          
 833   2          RF_StrobeCmd(CMD_PLL);
 834   2          //Wakeup process...
 835   2          //RxPacket();
 836   2          //...;
 837   2        }
 838   1      }
 839          
 840          /*********************************************************************
 841          ** RF_AdvFIFO_Init
 842          *********************************************************************/
 843          void RF_AdvFIFO_Init(void)
 844          {
 845   1        RF_WriteReg(FCR_REG, 0x0F);/* EARTS=1, EACKS=1, ARC=3, FCL=0 */
 846   1        RF_WriteReg(ARD_REG, 0x02);/* ARD=2, ARD=600us */ 
 847   1        RF_WriteReg(AFEP_REG, 0x40);/* spss=1 */
 848   1        RF_WriteReg(KEYC_REG, 0x20);/* ARTMS=1, fixed interval */
 849   1        RF_WriteReg(USID_REG, 0x00);/* Random seed=0, fixed interval=200us */
 850   1      }
 851          
 852          /*********************************************************************
 853          ** Is_Vpoak
 854          *********************************************************************/
 855          Uint8 Is_Vpoak(void)
 856          {
C51 COMPILER V9.56.0.0   MAIN                                                              03/06/2023 13:08:29 PAGE 15  

 857   1        Uint8 tmp;
 858   1        
 859   1        tmp = (RF_ReadReg(FCR_REG) >>6) & 0x01;/* read vpoak bit */
 860   1        return tmp;
 861   1      }
 862          
 863          /*********************************************************************
 864          ** main_prog_ACK
 865          *********************************************************************/
 866          void main_prog_ACK(void)
 867          {
 868   1        /* A sample code for auto-resend & auto-ack function */
 869   1      
 870   1        RF_AdvFIFO_Init();/* init advance fifo with auto-resend & auto-ack */
 871   1        
 872   1        if (Flag_MASTER) 
 873   1        {  
 874   2          while(1)
 875   2          {
 876   3            RF_WriteReg(GIO1_REG,0x01);/* gio1-wtr */
 877   3            RF_WriteReg(GIO2_REG,0x1D);/* gio2-trxd */
 878   3            RF_WriteReg(CKO_REG,0x02);/* cko-dck */
 879   3            
 880   3            RF_FIFOLength(64-1);/* fifo length 64 bytes */ 
 881   3            RF_StrobeCmd(CMD_PLL);
 882   3            RF_SetCH(80);/* ch=80, freq=5805.001MHz */
 883   3            /*  To set RF channel                                                                                */
 884   3            /*  RF base Freq : 5725.001MHz                                                                       */
 885   3            /*  Channel step : 1MHz                                                                              */
 886   3            /*  SetCH        : 80                                                                                */
 887   3            /*  RF Frequency = RF base Freq + (Channel step * SetCH) = 5725.001MHz + ( 1MHz * 80 ) = 5805.001MHz */
 888   3         
 889   3            RxCnt = 0;
 890   3            Err_Loss=0;
 891   3            Err_Frame=0;
 892   3            Err_BitCnt = 0;
 893   3            timer=0;
 894   3            TR0=1;
 895   3            EA=1; 
 896   3          
 897   3            while(1)
 898   3            { 
 899   4              RF_FIFOWrite(64); /* write data to tx fifo */
 900   4              if(RF_LVR_Check())/* check if BOD reset has occurred */
 901   4                break;/* exit loop & re-RF init */
 902   4              else
 903   4                RF_StrobeCmd(CMD_TX);/* transmit packet */
 904   4              
 905   4              Delay10us(1);
 906   4              while(GIO1);
 907   4      
 908   4              /* check vpoak */
 909   4              if(Is_Vpoak())
 910   4                P3 = P3 ^ 0x04;/* transmit completed, toggle I/O */
 911   4              else
 912   4                _nop_();/* resend fail */
 913   4                  
 914   4              Delay10ms(5);
 915   4            }
 916   3          }
 917   2        }
 918   1        else
C51 COMPILER V9.56.0.0   MAIN                                                              03/06/2023 13:08:29 PAGE 16  

 919   1        { 
 920   2          while(1)
 921   2          {
 922   3            RF_WriteReg(GIO1_REG,0x01);/* gio1-wtr */
 923   3            RF_WriteReg(GIO2_REG,0x1D);/* gio2-trxd */
 924   3            RF_WriteReg(CKO_REG,0x02);/* cko-dck */
 925   3      
 926   3            RF_FIFOLength(64-1);/* fifo length 64 bytes */ 
 927   3            RF_StrobeCmd(CMD_PLL);
 928   3            RF_SetCH(80);/* ch=80, freq=5805.001MHz */
 929   3                        
 930   3            RxCnt = 0;
 931   3            Err_Loss=0;
 932   3            Err_Frame=0;
 933   3            Err_BitCnt = 0;
 934   3            timer=0;
 935   3            TR0=1;
 936   3            EA=1;
 937   3      
 938   3            while(1)
 939   3            {
 940   4              if(RF_LVR_Check())/* check if BOD reset has occurred */
 941   4                break;/* exit loop & re-RF init */
 942   4              else
 943   4                RF_StrobeCmd(CMD_RX);
 944   4                  
 945   4              Delay10us(1);
 946   4              while(GIO1);
 947   4              
 948   4              /* check vpoak */
 949   4              if(Is_Vpoak())
 950   4              {
 951   5                P3 = P3 ^ 0x04;/* valid packet, toggle I/O */
 952   5                RxPacket();
 953   5              }
 954   4              else
 955   4                _nop_();/* invalid packet */
 956   4      
 957   4              Delay10ms(4);
 958   4            }
 959   3          }
 960   2        } 
 961   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2293    ----
   CONSTANT SIZE    =    309    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     33      44
   IDATA SIZE       =     94    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
